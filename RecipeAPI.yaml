openapi: 3.0.0
info:
  title: My Recipe API
  version: 1.0.0
  description: A web application to manage favorite recipes.

servers:
  - url: http://localhost:8080/
  
x-project-information:
  gitRepo: https://github.com/dhruvkothari26/RecipeAPIAssignment.git

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    Recipe:
      type: object
      properties:
        name:
          type: string
        creation_date:
          type: string
          format: date-time
        vegetarian:
          type: boolean
        servings:
          type: integer
        ingredients:
          type: string
        cooking_instructions:
          type: string

paths:
  /recipes:
    get:
      summary: Get all recipes
      security:
        - BasicAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
    post:
      summary: Create a new recipe
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
      responses:
        '201':
          description: Created

  /recipes/{name}:
    get:
      summary: Get a recipe by name
      security:
        - BasicAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
    put:
      summary: Update a recipe by name
      security:
        - BasicAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
      responses:
        '200':
          description: OK
    delete:
      summary: Delete a recipe by name
      security:
        - BasicAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content

# Testing Scenarios
x-scenarios:
  - name: Get All Recipes
    description: Retrieve all recipes.
    request:
      method: get
      url: /recipes
    response:
      status: 200

  - name: Create New Recipe
    description: Create a new recipe.
    request:
      method: post
      url: /recipes
      body:
        name: "Pasta"
        creation_date: "2023-07-25T15:30:00Z"
        vegetarian: false
        servings: 4
        ingredients: "Cheese"
        cooking_instructions: "1. Cook spaghetti. 2. Fry pancetta. 3. Beat eggs and cheese. 4. Mix all."
    response:
      status: 201

  - name: Get Recipe By Name
    description: Retrieve a recipe by name.
    request:
      method: get
      url: /recipes/Pasta
    response:
      status: 200

  - name: Update Recipe By Name
    description: Update a recipe by name.
    request:
      method: put
      url: /recipes/Pasta
      body:
        name: "Pasta"
        creation_date: "2023-07-19T15:30:00Z"
        vegetarian: true
        servings: 6
        ingredients: "Romano cheese"
        cooking_instructions: "1. Cook spaghetti. 2. Fry pancetta. 3. Beat eggs and cheese. 4. Mix all."
    response:
      status: 200

  - name: Delete Recipe By Name
    description: Delete a recipe by name.
    request:
      method: delete
      url: /recipes/Pasta
    response:
      status: 204

# Database Schema
x-database:
  type: postgresql
  schema:
    - table: recipes
      columns:
        - name: name
          type: text
          primaryKey: true
        - name: creation_date
          type: timestamp
        - name: vegetarian
          type: boolean
        - name: servings
          type: integer
        - name: ingredients
          type: text
        - name: cooking_nstructions
          type: text

# Documentation: Architectural Choices and How to Run the Application
x-documentation:
  architecturalChoices:
    - Security Scheme: This API uses Basic Authentication (HTTP basic authentication) as the security scheme to secure the endpoints. Users must include their credentials (username and password) in the Authorization header of the HTTP request to access the API.

    - Database: The application utilizes a PostgreSQL database to store recipe data. The schema includes the necessary columns to represent the attributes of a recipe, such as name, creation_date, vegetarian, servings, ingredients, and cooking_instructions.

    - RESTful Design: The API follows RESTful design principles for creating, updating, retrieving, and deleting recipes.

  howToRun:
    - Prerequisites: Before running the application, ensure you have TIBCO BW 6 or Tibco BW CE and PostgreSQL installed on your system.

    - Setup Database: Create required PostgreSQL database and configure the database connection in pgadmin

    - Clone the Repository: Clone the GitHub repository containing the API source code to your local machine.

    - Import the source code: Import the source code in studio and run it in debug mode for Unit testing. Do an lrestdoc and open the URL in any browser

    - Access the API: The API will be accessible at `URL`. You can use tools like Postman or cURL or browser to interact with the API endpoints.
